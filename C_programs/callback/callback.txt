A callback function is a function that you pass to someone and let them call it at some point of time.

In computer programming, a callback is a piece of executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at some convenient time.


 callback function is a function that is called through a function pointer. If you pass the pointer (address) of a function as an argument to another, when that pointer is used to call the function it points to it is said that a call back is made.

A callback method is one which is passed as an argument in another method and which is invoked after some kind of event.

“In computer programming, a callback is a reference to executable code, or a piece of executable code, that is passed as an argument to other code. This allows a lower-level software layer to call a subroutine (or function) defined in a higher-level layer.”

what callbacks are. A callback is an executable code that is passed as an argument to some other code. A pointer to a function is passed as an argument to some other function, So, when this function is called, it can call the other function,passed as an argument, any number of times to perform that task. 


 Here in this program, we have various functions named sum(), product() and divide() to perform various operations. We can call these functions using callback. The function perform_numeric_op() takes the callback function name as an argument, thereby registering the function to be called. And internally calls the function.(sum(), product() etc.).

This depicts the use of synchronous callback. Simply, these functions provide a choice to the user to call functions of similar prototype using a common registration function. They are used to create a library of similar prototype functions.

Another appreciable usage of callbacks is information hiding.The caller just has to register the function. Parameters are only known to the registration function from where the callback is called. Also the callback can be called from the registration function numerous times. So the function is registered once in main(), but can be called many times from inside the registration function.

Another major usage of callbacks can be seen in the case of event handling. Like events generated on a click of a button. Some event may be registered on the basis of which the callback may be called.

An example of this is shown below:

/********************************************************************
* This code catches the SIGINT signal generated by pressing CTRL+C
*  Copyright MyBodhiZone. 
*  More Learning Content at http://www.mybodhizone.com
********************************************************************/
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
 
struct sigaction act;
FILE *f_ptr = NULL;
 
/* signal handler definition goes here */
void sig_handler(int signo, siginfo_t *si, void *ucontext)
{
   printf("Closing the file\n");
   fclose(f_ptr);
   exit(0);
}
 
int main(void)
{
    act.sa_sigaction = sig_handler;
    act.sa_flags = SA_SIGINFO;
    f_ptr = fopen("swap.c","r");
 
    /* register signal handler */
    sigaction(SIGINT, &act, NULL);                                        
    while(1){}
    /* after signal handler execution */                                             
    printf("back to main\n");                     
    return 0;
}

 

Paste the above code in the editor and execute it.
Note:This code requires no input.

In the above program, we can see that a file is opened for reading and the program is in an infinite loop. A signal handler is used to perform the callback for SIGINT signal. So whenever a SIGINT or interrupt is received, the program may terminate but before that it will close the opened file.

So the use of callbacks here can be seen as to perform the necessary tasks based on an event, or more precisely, on any signal received from the kernel. So this allows freeing of memory resources which will prevent memory corruption in future.

