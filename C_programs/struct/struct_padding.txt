   In order to align the data in  memory,  one or more empty bytes (addresses) are inserted (or left  empty) between memory addresses which are allocated for other structure  members while memory allocation. This concept is called structure  padding.

    Architecture of a computer processor is such a way that it can read 1 word (4 byte in 32 bit processor) from memory at a time.
    To make use of this advantage of  processor, data are always aligned as 4 bytes package which leads to  insert empty addresses between other memberâ€™s address.

    Because of this structure padding concept in C, size of the structure is always not same as what we think.

      For example, please consider below structure that has 5 members.
..
struct student
{
       int id1;
       int id2;
       char a;
       char b;
       float percentage;
};
..

    As per C concepts, int and float datatypes occupy 4 bytes each and  char datatype occupies 1 byte for 32 bit processor. So, only 14 bytes  (4+4+1+1+4) should be allocated for above structure.
    But, this is wrong.  Do you know why?

    Architecture of a computer processor is such a way that it can read 1 word from memory at a time.
    1 word is equal to 4 bytes for 32 bit processor and 8 bytes for 64  bit processor. So, 32 bit processor always reads 4 bytes at a time and  64 bit processor always reads 8 bytes at a time.
    This concept is very useful to increase the processor speed.
    To make use of this advantage, memory is arranged as a group of 4 bytes in 32 bit processor and 8 bytes in 64 bit processor.

    Below C program is compiled and executed in 32 bit compiler. Please  check memory allocated for structure1 and structure2 in below program.

####################################################### BIT FIELD ##############################################################################

In C, structure members can be specified with size in number of bits, and this feature is known as bit-fields. Bit-fields are important for low-level (i.e., for systems programming) tasks such as directly accessing systems resources, processing, reading and writing in terms of streams of bits (such as processing packets in network programming), cryptography (encoding or decoding data with complex bit-manipulation), etc.

No doubt, bit-fields are a powerful feature for low-level bit-manipulation. The cost of using bit-fields is the loss of portability. We already saw how padding and ending issues can affect portability in our simple program for reading the components of a floating-point number. Bit-fields should be used in places where space is very limited, and when functionality is demanding. Also, the gain in space could be lost in efficiency: bit-fields take more time to process, since the compiler takes care of (and hides) the underlying complexity in bit-manipulation to get/set the required data. Bugs associated with bit-fields can be notoriously hard to debug, since we need to understand data in terms of bits. So, use bit-fields sparingly and with care
